HTML勉強 メモ

・HTML内ではWindowsのファイルパスをバックスラッシュではなくスラッシュで記述する。

・HTML要素の中身

　HTMLの要素は主に以下のようなもので構成されている。

    開始タグ
    　→ 要素の名前を<>で囲んだもの。どこから要素が始まっているのか、どこから効果が始まるのかを表す。

    終了タグ
    　→ 要素名の前にスラッシュが入っていることを除いて開始タグと同じ。どこで要素が終わるのかを表す。

    コンテンツ
    　→ 要素の内容。

    要素
    　→ 開始タグ、終了タグ、コンテンツのまとまりのこと。

　要素には、<p class="editor-note">My cat is very grumpy</p>　のclass="editor-note"のように
　属性(attribute)を設定することができる。属性には、実際のコンテンツには表示させたくない、要素に関する情報が
　含まれている。ここでは、classが属性の名前で、editor-noteが属性の値。class属性では、要素に一意ではない
　識別子を与えることができ、それを使って要素(および同じclass値を持つ他の要素)にスタイル情報などのターゲット
　を設定することができる一部の属性、たとえば required には値が無い。

　値を設定する属性は常に以下のような形式になる。

    1．要素名(既にいくつか属性がる場合は一つ前の属性)との間の空白
    2．属性名とそれに続く符号
    3．引用符で囲まれた属性の値

・空要素

　コンテンツを持たない要素もある。そのような要素を「空要素」と呼ぶ。img要素を例に見ていくと、
　<img src="images/test.png" alt="テスト画像" />

　この要素は2つの属性を持っているが、終了タグ</img>が無く、内部にコンテンツもない。これは画像要素は、
　その機能を果たすためにコンテンツを囲むものではないから。画像要素の目的は、
　画像をHTMLページの表示させたいところに埋め込むことである。

・コメントは<!-- -->で囲む

・<,>,&,'などの特殊文字は < = &lt; などのように記述する。この場合、< は小なり、
　つまりless thanを表しているのでltとなっている。

・<title>要素は色々な方法で使われる。例えば、ページをブックマークすると、提案されるブックマーク名として
　<title>コンテンツが記入されている。

・ファビコン(タブやブックマークの一番左に表示されるアイコンのようなもの)をページに追加するには

    1．サイトのインデックスページと同じディレクトリに .ico 形式で保存する。
    　 (多くのブラウザは.gifや.pngのような、一般的な形式のファビコンにも対応している)

    2．HTMLの<head>ブロックに次の行を入れて参照する。
        <link rel="icon" href="favicon.ico" type="image/x-icon" />

・<script>要素もヘッド部に入れるべきであり、読み込みたいJavaScriptのパスを含む src 属性と基本的にページが
　HTMLの解析を完了した後にJavaScriptを読み込むようにブラウザに指示する defer を記載する必要がある。
　これはJavaScriptを実行する前にHTMLが全て読み込まれていることを確認し、JavaScriptがまだページ上に存在しない
　HTML要素にアクセス仕様とした結果、エラーが発生しないようにするために有用なもの。
　現代のブラウザではこれが最も信頼できる(らしい)

・リンクをクリックして、そのwebページ内のどこかにジャンプする機能を「文書フラグメント」と呼ぶ。
　これを行うには、まずリンク先の要素に id 属性を割り当てる必要がある。
　通常は特定の見出しにリンクするのが理にかなっているため、以下のようになる。

    <h2 id="Mailing_address">Mailing address</h2>

　次のその特定のidにリンクするには、URLの最後にハッシュ/ポンド記号(#)をつけて書く。例えば以下のようになる。

    <p>
      Want to write us a letter? Use our
      <a href="contacs.html#Mailing_address">mailing address</a>

　同じ文書の別の部分にリンクするために、文書フラグメント参照を単独で使用することもできる。

    <p>
      The <a href="#Mailing_address">company mailing address</a>
    can be found at the
      bottom of this page.
    </p>

　つまり、#の後にid=で指定したものを指定する、ということになる。

・webの世界が最初に構築されたとき、HTMLはそれほど厳格には解析されなかった。これは、構文が絶対的に正しい
　ことを確認するよりも、人々がコンテンツを公開できることの方が重要であると判断されたため。
　webが最初からもっと厳密なものであったら、おそらく今のような人気は無かっただろう。

・警告：他人のウェブサイトでホスティングされている画像を「許可なくsrc属性で指定する」のはダメ。
　これは「ホットリンク」と呼ばれ、誰かがページにアクセスしたときに画像を配信するための帯域幅のコストを
　他の誰かが負担することになるため、一般に倫理的な問題があると考えられる。

・SVG(Scalable Vector Graphics)は、線、曲線、その他の幾何学図形を使用して2Dグラフィックスを
　レンダリングする。

・「クリックジャッキング」は、ハッカーが目に見えないiframeを文書に埋め込んだり(文書を自分の悪意のある
　webサイトに埋め込んだり)して、ユーザーの操作を乗っ取るための一般的なiframe攻撃の一種。これは、ユーザーを誤解させたり
　機密データを盗む一般的な方法である。

・攻撃者が欺いて悪意のあるコンテンツ(iframe外にある)を直接訪問させることができれば、サンドボックスは保護を提供しない。
　特定のコンテンツが悪意のあるコンテンツ(ユーザー生成コンテンツなど)である可能性がある場合は、
　別のドメインからメインサイトへ配信する。

・web上では「ラスター画像」と「ベクター画像」の2種類の画像を扱う。それぞれの説明は以下の通り。

    ラスター画像
    　→ ピクセルのグリッド(格子)を使用して定義される。ラスター画像ファイルには、各ピクセルの配置場所を正確に示す情報と、
    　　その色を正確に示す情報が含まれている。一般的なwebのラスター形式には、ビットマップ(.bmp)、PNG(.png)、JPEG(.jpg)、
    　　GIF(.gif)などがある。

    ベクター画像
    　→ アルゴリズムを使用して定義される。ベクター画像ファイルにはシェイプ(形状)とパス(経路)の定義が含まれており、画面に描画される時に
    　　画像がどのような外見になるかを、コンピュータが理解するために利用することができる。SVG形式では、ウェブ上で使用するための
    　　強力なベクターグラフィックを作成することができる。

　2つの画像の違いを分かりやすく理解するには、
　https://mdn.github.io/learning-area/html/multimedia-and-embedding/adding-vector-graphics-to-the-web/vector-versus-raster.html
　上記URLの2つの星を拡大してみてみると、ラスターの方はズームするとピクセル化されるが、ベクターの方は大きさに関わらず
　アルゴリズムが画像内のシェイプを処理するために使用され、値が大きくなるにつれて単純に縮尺が変更されるため、綺麗にくっきりと見える。

・SVGは、ベクター画像を記述するためのXMLベースの言語。

・SVGはとても複雑で、ファイルサイズが大きくなる可能性があるため、実際はラスター画像の方が人気。

・アートディレクション問題とは、モバイル版とweb版で違って見えてしまうみたいな問題。

・

=================================================================================================================================

ミス一覧

・全角スペースが入ってスペルミスなど無いはずなのにドツボにはまった
　　解決 → そのすぐ下にもう一度手打ちで同じプログラムを打つ

・link relの意味をあまりわかっておらずファイル名から拡張子を除いたものを記述する場所だと思っていた
　　解決 → link relの意味をちゃんと調べたら自分のバカさに気づけた

・

======================================================================================================

アイデアやサイト案など

・