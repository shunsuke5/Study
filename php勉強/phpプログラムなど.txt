phpプログラムなど

ヒアドキュメント
　→ 文字列を区切ってコード内に記述する。あるIDを<<<の後に指定し、文字列を置いた後で同じIDで閉じる。
　　終端IDはスペース又はタブでインデントすることができ、その場合、インデントされた部分は文字列の全ての行から取り除かれる。
　　例えば、1つ目の例では最後のcがちゃんと4スペース右にインデントされた状態で表示されるが、
　　2つ目の例ではcの前にスペースは入らない。
　　注意点として、終端IDは文字列本体よりも奥にインデントしてはいけない。そして、終端ID、文字列のどちらもインデントする際にタブと
　　スペースをまぜてはいけない。

echo <<<END
        a
      b
    c
\n
END;

echo <<<END
        a
      b
    c
    END;

Nowdoc
　→ ヒアドキュメントと似ているが、ヒアドキュメントが文字列をダブルクォートで囲むのと同じのに対し、
　　文字列をシングルクォートで囲った時と同じ挙動をする。

    echo <<<'EOD'
    ...
    EOD;

配列の宣言
    $array = array(key => value, key => value2...);
    $array = [key => value, key => value2...];　← 短縮版

　→ key は整数または文字列。valueには任意の方を指定できる。配列の宣言時に同じキーで複数の要素を指定すると、最後に指定したものが
　　それまでの値を上書きする。keyはオプション。省略した場合、phpはこれまでに使われた整数のキーの中で最大のものに1を加えた値を使う。

配列の分解
    [変数1, 変数2, 変数3...] = 配列変数
    [, , 変数3...] = 配列変数

　→ 配列の各要素を変数に格納していく。2つ目の例のようにすると、変数が与えられない配列の要素は無視される。
　　つまり、変数3にインデックス2の要素が格納されるだけとなる。

配列のアンパック
    [...array, ...array2]

　→ 配列の値を展開(アンパック)する。...を使った配列のアンパックは、php7.4.0以降で利用可能。



================================================================================================================================

関数

phpinfo()
　→ phpからシステムに関する情報を取得する。

str_contains(文字列, 検索文字列)
　→ 指定された文字列が含まれているかを判定する。

var_dump()
　→ 式の型と値を表示する。デバッグで使うとめっちゃ便利。

get_debug_type()
　→ 式の型を知る。

is_type()
　→ 式がある型であるかどうかを調べる。

intdiv()
　→ 割り算を行う。

is_nan(float $num): bool
　→ 浮動小数点数の値が、非数かどうかを調べる。指定されたnumが、NAN(Not A Number)であるかどうかを返す。

file_put_contents(ファイル名,書き込むデータ,フラグ)
　→ ファイルに情報を書き込む。この関数ではfopen(),fwrite(),fclose()を続けて実行してデータをファイルに書き込む動作を一回で行える。
　　成功した場合はファイルへ書き込まれたバイト数、失敗した場合はfalseが返される。
　　フラグについては以下の通り。

        FILE_USE_INCLUDE_PATH
        　→ ファイルをインクルードディレクトリから探す。

        FILE_APPEND
        　→ 既存ファイルへ追加で書き込みをする。

        LOCK_EX
        　→ 書き込み中にファイルをロックして、他の人からの書き込みができないようにする。

substr(string $string, int $offset, ?int $length = null): string
　→ 文字列stringのoffsetで指定された位置からlengthバイト分の文字列を返す。
　　オフセットを負の文字列で指定した場合は、文字列の後ろから何文字目、といった挙動をする。

substr_replace(
    array|string $string,
    array|string $replace,
    array|int $offset,
    array|int|null $length = null
): string|array
　→ 文字列stringのoffset及びlengthパラメータで区切られた部分をreplaceで指定した文字列に置換する。

strval(mixed $value): string
　→ 変数を文字列に変換する。valueのstringとしての値を返す。配列は常に Array という文字列に変換されることに注意。

unset(mixed $var, mixed...$vars): void
　→ 指定した変数を破棄する。配列のキーを削除することができる。
　　ただし、これによってインデックスの再構築が行われるわけではないことに注意する。0-4までのインデックスがあった配列arrayをunset()し、
　　その後$array[] = 値; のようにすると、新しい添え字は 0 ではなく 5 となる。

list(mixed $var, mixed...$vars = ?): array
　→ この関数は実際には関数ではなく言語構造。一連の変数に値を代入するために使われる。

array_values(array $array): array
　→ 配列arrayから全ての値を取り出し、数値添え字をつけた配列を返す。

array_diff(array $array, array...$arrays): array
　→ arrayを他の配列と比較し、arrayの要素の中で他の配列には存在しないものだけを返す。

array_map(?callable $callback, array $array, array ...$arrays): array
　→ 指定したarrayの各要素にcallbackを適用した後、適用後の要素を含むarrayを返す。
　　callback関数が受け付けるパラメータの数は、array_map()に渡される配列の数に一致している必要がある。
　　それより配列の数が多かった場合、溢れた分は無視される。少なかった場合は ArgumentCountError がスローされる。

header(string $header, bool $replace = true, int $response_code = 0): void
　→ 生のHTTPヘッダを送信するために使用される。

print_r(mixed $value, bool $return = false): string | bool
　→ 変数の値に関する情報をわかりやすい形式で表示する。配列の確認などに使うと便利。



================================================================================================================================