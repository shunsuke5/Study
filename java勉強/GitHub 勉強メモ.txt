GitHub 勉強メモ

・Masterは基本的にマージのみ。Masterにコミットは絶対にしない。

・ブランチを分けてそこに移動し、最新のデータを取得したらソースの編集を始める。

・「git config --global core.editor 'code --wait'」でエディタをvscodeに指定できる。
　core.editorはデフォルトエディタの設定で、codeがvscodeを指している。

・今やってるjavaゲーム開発の流れとしては、以下の通りがよい？

　ローカルのdevelopブランチで作業をする
　↓
　その日の作業が終わったらコミットしてgit push origin developでリモートにプッシュ
　↓
　github上(リモートリポジトリ上)のdevelopからmasterへプルリクエストを送信
　↓
　問題が無ければプルリクエスト承認、developをmasterにマージ
　↓
　本来は切ったブランチを削除する処理をここで入れた方が良い(javaGameはとりあえず今のままでいい)

　※そもそも自分がローカルでやった履歴がリモートにも残ってたら便利かなぐらいなのでチェックとか必要ない気がする

・コミット履歴一覧に行きたい場合は、まず「Your Profile」に移動し、「Contribution activity」から
　「14commits」のような表記を探してクリックすると、コミット一覧に行ける(もっといい方法があるはずだけど)

・作業が終了した後、作業のために切ったブランチは削除した方が良い。なぜなら、
　・マージ後のブランチに誤ってcheckoutしてしまう
　・どのブランチがマージ済みなのかわからなくなる
　のように、ブランチが増えると管理が大変になる、といった弊害が起きる可能性があるため。
　個人で何かを作っている今のような状態ならば別にdevelopブランチはずっと残していてもよいが、
　仕事ではそうもいかないため今から慣れておきたいならwebシステム開発の方では
　最初に作業ブランチを切り、マージ後にそのブランチを削除することをした方がよい。

・ブランチを削除する際、カレントのブランチを削除しようとすると
　「error: Cannot delete branch 'develop' checked out at」のように表示され、削除できないので
　他の削除対象外のブランチに移動してから削除する。

　上記に関連して、「error: The branch 'develop' is not fully merged.」と表示された場合は
　削除しようとしているブランチがまだマージされていないため削除できないことを意味しているので、
　マージしてから削除、もしくは強制気に削除する場合は-Dをつけてコマンドを実行する。

・githubで消したブランチがローカルで表示される場合、git remote show origin　のコマンドを打つと、
　現在のブランチの状態的なものが確認できる。問題ないブランチは「tracked」と表示され、
　対して消えない腐ったブランチは「stale」と表示される。staleなブランチを削除するには、
　git remote prune origin コマンドを打つとstaleのブランチを一掃してくれる。
　消されるブランチを事前に確認したい場合は、git remote prune origin --dry-run
　コマンドを利用する。

=========================================================================================================

コマンド集

git config --global core.editor
　→ デフォルトのエディターを指定する。

git branch --contains
　→ 自分が今いるブランチを出力する。

git push -u origin master
　→ 上流ブランチを設定してpushする。

git switch -c ブランチ名
　→ 対象ブランチを新規作成し、切り替える。



=========================================================================================================

用語集

Git
　= ソースコードなどの変更履歴を記録・追跡するためのバージョン管理システム。
　　ローカル環境(自分のパソコンなど)に全ての変更履歴を作成することができるため、
　　コードの変更管理などをするために用いられる。

GitHub
　=　Gitの仕組みを利用してウェブ上にソースコードなどの変更履歴を記録、また公開することができるサービスの名称。

リポジトリ
　=　履歴管理を行い諸々のデータが格納される場所。Gitの根本となる部分。

リモートリポジトリ
　=　サーバ(ウェブ上)にあるリポジトリのこと。ここにコードが格納されることでウェブ上に公開することができる。

ローカルリポジトリ
　=　自分のPC上にあるリポジトリのこと。

マスターブランチ
　=　リポジトリを作成したときに最初に作成される本流。本番用の原本的なもの。

ブランチ
　=　変更履歴を枝分かれさせたもので、マスターブランチのコピーのようなもの。

クローン
　=　リモートリポジトリを自分のPC上にコピーすること。このコピーは、ローカル上でローカルリポジトリとなる。

ステージング
　=　変更したデータを仮保存すること。(この時リポジトリには保存されない)

コミット
　=　インデックスされたデータをローカルリポジトリに反映させること。

プッシュ
　=　ローカルリポジトリの内容をリモートリポジトリに反映させること。

マージ
　=　ブランチを合流させ、変更内容を合体させること。一般的にはブランチに履歴を残していき、
　　 本番に移したい時にマスターブランチにマージする、という運用を取る。

=========================================================================================================

エラーの原因、ミスや引っかかったこと、つまずいたことやわからないこと

・Map.javaのコンストラクタを変更し、子クラスたちのコンストラクタもその形に合わせているはずなのに
　なぜかエラーが出っぱなしになる。
　　→ 原因はgithubさわりたてで色々コマンドを試していた時に恐らくcloneコマンドでjavaGame_1配下に
　　　もう1つjavaGame_1(sample)フォルダを作ってしまっていたのでいろいろこんがらがったこと。
　　　気づいたきっかけは、Main.javaでメソッドの動きを確かめるために変更したのにその変更が適用されておらず、
　　　なぜ？と思ったことだった。

・ブランチを作成しようとしたら「fatal: not a valid object name: 'master'」と表示された。
　　→　新しいブランチを作成するには最低1回はマスターブランチにコミットする必要があるから。
　　　 また、最初のコミットが完了するまではマスターブランチが存在しない。
　　　 コミットしたいものがある場合はaddしてからcommit、空コミットの場合はaddせずに
　　　 git commit --allow-empty -m "コミットメッセージ" のようにしてコミットする。
　　　 その後、git push origin master とすることで、無事ブランチが切り分けられるようになる。