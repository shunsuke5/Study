Java Bronze 勉強メモ

https://www.oracle.com/jp/education/certification/ocjp-silver-se8-3494542-ja.html

問題7

・インクリメント演算子と三項演算子に関する問題。int num = 5; としている場合、
　int count = num++; のように後置インクリメントで代入を行っている場合は、先にnumをcountに代入してからインクリメントを行う。
　そのため、この式が終わった時点ではcount = 5, num = 6、となっている。
　int result = ++count; のように前置インクリメントで代入を行っている場合は、先にcountの値をインクリメントしてからresultに代入する。
　そのため、この時点でnum = 6, count = 6, result = 6 のようになる。

　次に、String str = num == count ? num < result ? "ARG" : "BOL" : "CHL"; と三項演算子を用いているが、
　三項演算子はtrueのときに : の左、falseのときに : の右が評価される。

　実際に String str = a > b ? c > d ? "abc" : "def" : "ghi";　を試してみると、
    true,true → abc
    true,false → def
    false,true → ghi
    false,false → ghi
　となった。どういうこと？

　やっとわかった。a > b がtrueの時は「c > d ? "abc" : "def"」が評価されて、falseの時は「"ghi"」が評価される。
　だからa > b がfalseの時は必ず ghi になるのもこれで納得がいく。
　ずっとa > b がtrueになった時にだけ c > d が評価される、みたいな考えをしてしまっていた。コロン3つあることにも面食らった。

・問題8のように、二次元配列を拡張for文で for (char[] ca : chArr) {...} とした場合、ca にはchArrが保有する配列が順番に渡されていく。

・for文などでbreak; の後にプログラムを記述すると到達不能コードとなりエラーが出るので注意する。

・インスタンスメソッドからクラス変数にアクセスすることはできるが、
　クラスメソッド(staticメソッド)からインスタンス変数にアクセスすることはできないので注意する。

・同クラス内のコンストラクタを呼び出すにはthis(); またはthis(引数リスト); と記述するが、「必ずコンストラクタ内の先頭で1回のみ」とする。
　コンストラクタ呼び出し同士がお互いを呼び出していて、循環してしまうような呼び出し方もできない。

・アクセス修飾子は、public > protected > パッケージ・プライベート(アクセス修飾子なし) > private の順で厳しくなることを覚えておく。
　オーバーライドする際はより緩い修飾子にすることは可能だが、厳しい修飾子に変更してオーバーライドすることはできない。

・インタフェースのデフォルト修飾子として、インタフェースではメソッド(default,staticメソッド以外)は暗黙的にはpublic abstract が付加され
　変数(定数)には暗黙的にpublic static final が付加される。そのため、インタフェースでvoid abc(); となっているメソッドを
　それを実装したクラスでvoid abc() {} とすると、クラスは修飾子を省略するとパッケージプライベートになるため、
　より厳しい修飾子でオーバーライドすることになってしまい、コンパイルエラーとなる。

・コンストラクタ場用意されていないクラスには、デフォルトコンストラクタが用意されるが、明示的にコンストラクタが用意されたクラスには
　デフォルトコンストラクタは用意されない。

　コンストラクタ内で、別コンストラクタを呼び出していない場合には、暗黙的にsuper();が追加される

　上記2つのルールから、親クラスに存在しないsuper();を呼び出してエラーになっているような問題に注意する。
　あとはコンストラクタを修正するような問題でも、どっちが正解なんだと迷った場合は、これを意識しなければならない。

・Exceptionクラスのサブクラスの内、RuntimeExceptionクラスのサブクラスは非チェック例外となる。
　Exceptionクラスの全てのサブクラスは復旧可能である。
　catchブロック内のパラメータは全てThrowable型として扱うことができる。

・for文の初期化式; 条件式; 継続式; はどれも省略可能。
　そして、例えばfor(int i = 0; i++ < 5;) {...} のようにi++が条件式にある場合は、条件を判定した後にインクリメントされる。
　つまりfor文内の{...}の時にはインクリメントされていることに注意する。

・配列の要素外にアクセスするのはコンパイルエラーではなく実行時エラーとなるので注意する。
　コンパイルエラーは文法がおかしいときに起こり、実行時エラーは文法的には合っているが実際にプログラムとしておかしい時に起こる。

・「if文やelse文の{}を省略した場合は最初の一行のみが実行される」の意味としては、「最初の一行のみが判定の対象になる」と言った意味である。

if (a > b) {
    a += b;
} else 
    a /= b;
    b += a;

　例えば上記のプログラムでは、仮にa > bがtrueであったとしても、elseの対象は a /= b; のみなので、
　そのあとのb += a; はif文の判定に関わらず必ず実行される。これがif文の「最初の一行だけ実行される」の意味なので注意する。

・コンストラクタで
super();
this();
　のようにしてはならない理由としては、親クラスのコンストラクタが暗黙的に呼び出されることが関係している。
　コンストラクタの先頭には暗黙的にsuper();があるため、上のような例ではthis();の中でまたsuper();が呼び出され、
　親クラスのコンストラクタが2回呼び出されることとなってしまう。

・情報隠蔽とは、抽象化を維持するための設計原則。抽象化することで共通部分にのみ着目すればよくなるため、クラス間の関係はシンプルになる。

・do while(x > 0) {

}

　上記のようなプログラムで全く疑問を抱かずにコンパイルエラーを選択できなかったので、あまり早く早くと急ぎすぎてもよくない。
　ちゃんと問題を見る、そもそもプログラムが正しい記述をしているかを見ること。

・クラス名で使用できる文字は、1文字目以降にUnicode文字、アンダースコア、ドル記号であり、2文字目以降はこれらに加えて数字が使える。

・Javaプログラミング言語には、以下のような特徴がある。

    プラットフォームに依存しない
    アーキテクチャに依存しない
    自動でメモリが解放される
    実行時にコンパイルしながら実行する、「実行時コンパイル方式」を採用している
    マルチスレッドによる並行処理をサポートしている
    セキュリティ性能が高い

・アーキテクチャとはソフトウェアを構成するクラス同士の構造のことで、ソフトウェアの用途や形態によってさまざまなアーキテクチャがある。
　Javaは用途を特定しておらず、特定のアーキテクチャに依存しない。

・継承関係にあっても、privateなフィールドやメソッドとコンストラクタは引き継がれないので注意。

・if文を用いた問題で条件式の等価演算子が「==」ではなく「=」になっていないか注意深く見る。

・オーバーロードできていそうでできていないメソッドに注意する。

    int a(int num) {}
    double a(int num) {}

　戻り値だけが異なるのは、どちらを呼び出すのかがわからない。冷静にオーバーロードできているかを確かめる。

・ダウンキャストによるエラーは「実行時エラー」である。なぜなら、キャスト式自体は記述することに何の問題もないから。
　それがダウンキャストだとプログラム側がわかるのは実行時なので、実行時エラーである。

・while(i++ < 5) の条件式で実際にインクリメントされることに注意する。条件式にインクリメントやデクリメント、代入があった場合は
　条件式の判定だけではなくそれらも実際に行われるので気を付ける。

・クラス内のstaticメソッドからは同じクラス内のstaticフィールド、staticメソッドにしかアクセスできないので注意。

・Javaでは「コンスタントプール」と言う仕組みを使い、同じ文字列リテラルによって生成されるStringのインスタンスを使いまわしている。
　例えば以下のコードで生成されたs1,s2のインスタンスへの参照は同じとなり、s1 == s2 がtrueとなるようになっている。

    String s1 = "abc";
    String s2 = "abc";

・for文は条件式に合っていない場合、その内容が1回も実行されず次のプログラムへ進むことに注意する。

・system.out.println((x + 1) * (i++))　のように後置インクリメントの場合は先にその変数が式の中で使われた後で
　インクリメントされることに注意。ちなみに((x + 1) * (++i)) のように前置インクリメントの場合はインクリメントされてから
　式に使われることを確認済み。前置と後置の違いについてとにかく気を付ける。

・Java SEの主な特徴は以下の通り。

    JVMの提供
    標準クラスライブラリの提供
    各種開発ツールの提供

　Java SEは、「JRE」と「JDK」という2つのパッケージで構成されている。JREはJavaプログラムの実行に必要なライブラリ、JVM、
　その他必要なコンポーネントをまとめて提供している。もう1つのJDKは、JREに加えて開発に必要なコンパイラやデバッガ、
　各種開発ツールが含まれている。

　標準クラスライブラリは、大きく分けて以下の3つの機能を提供している。

    基本ライブラリ
    　→ java.lang,java.utilをはじめとする基本的なパッケージが含まれている。他にもI/Oやシリアライズ、ネットワーク機能、
    　　セキュリティや国際化対応、JVMを監視するためのJMX(Java Management eXtensions)、XMLを扱うためのJAXP(Java API for XML Processing)
    　　、Javaとネイティブアプリケーションの連携を実現するJNI(Java Native Interface)などもこのライブラリに含まれる。

    統合ライブラリ
    　→ データベース連携を実現するJDBC(Java Database Connectivity)、分散アプリケーションを開発するためのRMI(Remote Method Invocation)、
    　　CORBA(Common Object Request Broker Architecture)、RMI-IIOP(RMI over IIOP)、ディレクトリサービス連携を実現する
    　　JNDI(Java Naming and Directory Interface)といった機能が含まれる。

    ユーザーインタフェースライブラリ
    　→ GUIを実現するAWTやSwing、画像処理をするためのJava 2D、印刷サービスやテキスト変換などが含まれている。

・

=================================================================================================================================

受験申しこみ方法、注意点など

・RETAKE24JP　を申込時にプロモーションコードとして入力

・参考サイト
https://qiita.com/Channel/items/31e50323d2b7ee78f7cc
https://nokonokonetwork.com/certificate/oracle/how-to-apply-for-oracle-master-and-java-certification-exam.html

・