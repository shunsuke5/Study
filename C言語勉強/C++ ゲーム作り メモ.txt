C++ ゲーム作り メモ

・Direct3D.hのクラスに用意した4つの変数については以下の通り。

　Direct3Dデバイス = グラフィックス関係の素材を創造するための役割。画像とかポリゴンとか、その他いろいろ作れるのはこいつ。

　Direct3Dデバイスコンテキスト = 画像とかポリゴンとかの素材を使って、実際にBackBufferなどに絵を描くやつ。描画関係はこいつが主役。

　SwapChain = 絵をかくときはいきなりウィンドウに描かない。一度裏画面であるBackBufferに描く(ちらつきを無くすため)。
　　　　　　　その裏画面であるBackBufferとウィンドウを切り替えする役割がこいつ。こいつがいないと画面に何も表示されない。

　BackBufferView = SwapChainが持っているBackBuffer(裏画面)にアクセスするためのハンドル。これがないと、BackBuffer(裏画面)を
　　　　　　　　　 操作することができない。車で例えるならBackBufferが車本体で、BackBufferViewがその車を操作するためのハンドル。

・シングルトンパターンというプログラムの組み方をすると、クラスの実体を2つ以上生成できないように制限し、更にどこからでも使用できる
　便利なクラスとなる。ただしグローバル変数のように扱えてしまうため、多用は禁物。マネージャのように、1つだけ必要で
　どこからでも参照したいようなクラスに限り使用していく。

・framework.hにはプログラム全体で使用するような汎用的な機能を記述する。

・何かの形を画面に描画するには「シェーダー」というプログラムが必ず必要となる。

・画面に何かを表示するには、基本的には三角形として描く。四角形を描きたい場合は三角形を2枚で表現することができる。
　この三角形のことを「ポリゴン」と呼ぶ。複雑な地形やキャラクターはこのポリゴン(三角形)がたくさん集まってできている。

・三角形は点が3つで表現できる。この点(頂点)を1つ1つ計算で動かしたりできるのが「頂点シェーダー」となる。
　移動以外にも次のピクセルシェーダーへ渡すためのデータを計算したりする。

・点3つで三角形ができ、それを「面」と呼ぶ。その面は何かしらの色で塗る必要がある。その面を塗る場所が「ピクセルシェーダー」。

・三角形の点(頂点)1つが、どんな情報を持っているのかを記述したものを「入力レイアウト」と呼ぶ。これをコンピュータに教えてやらないといけない。

・  