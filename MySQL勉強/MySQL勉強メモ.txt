MySQL勉強メモ

・サーバーに接続するには、通常、mysqlの起動時にMySQLユーザー名とパスワードを指定する必要がある。
　サーバーがログインしたマシン以外で実行されている場合は、ホスト名も指定する必要がある。
　「mysql -h ホスト名 -u ユーザー名 -p」 で接続できる。ホスト名はMySQLサーバーが稼働しているホストの名前、
　ユーザー名はMySQLのアカウントのユーザー名。その後Enter password:で正しいパスワードを入力できたら
　紹介情報に続いてmysql>プロンプトが表示される。これでmysql>プロンプトに、mysqlでSQLステートメントを
　入力する準備ができていることが示される。

・ログイン時に以下のようなエラーメッセージが表示される場合がある。
　「ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/tmp/mysql.sock'」
　これは、MySQLサーバーデーモン(Unix)またはサービス(Windows)が起動していないことを示している。

・クエリーとは、「問い合わせ」という意味。MySQLではSQL言語を用いてマシンにデータを要求する文のことを指していると思われる。

・クエリーは通常、SQLステートメントの後にセミコロンが続くもので構成される。
　クエリーを発行すると、mysqlはそのクエリーをサーバーに送信して実行し、
　結果を表示してから別のクエリーの準備ができていることを示す別のmysqlプロンプトを出力する。

・MySQLは、クエリーの出力を表形式(行と列)で表示する。最初の行には列のラベルが表示される。

・mysqlでは、入力業の終わりを探すのではなく、終了セミコロンを探すことによって、ステートメントの終了位置が決定される。
　つまり、mysqlは自由形式の入力を受け入れる。入力業を収集するが、セミコロンが見つかるまでは実行しない。

・プロンプトがmysqlから->に変化した場合、これはmysqlがまだ完全なステートメントを検出しておらず、
　残りの入力を待機していることを示している。入力処理中のクエリーを実行しない場合は \c と入力して取り消す。
　プロンプトのフィードバックを見れば、mysqlが何を待機しているのかを認識することができる。
　以下に表示される各プロンプトとそれらが示すmysqlの状態をまとめる。

　mysql> = 新規クエリーの準備完了
　->　　 = 複数行クエリーの次の行を待機している
　'>　　 = 次の行を待機しており、シングルクォーテーションで始まる文字列の完了を待機している
　">　　 = 次の行を待機し、ダブルクォーテーションで始まる文字列の完了を待機している
　`>　　 = 次の行を待機しており、バッククォーテーションで始まる識別子の完了を待機している
　/*>　　= /*で始まったコメントが完了するまで次の行を待機している

・複数行のステートメントは、単一行に対してクエリーを発行しようとしたが、終了セミコロンを忘れた場合に発生する。

・QUITとUSEにはセミコロンは必要ない。USEステートメントは、1行内に記述する必要がある。

・UNIXでは、データベース名は大文字と小文字が区別されるため(SQLキーワードとは異なり)、
　常に正しいデータベース名を参照する必要がある。

・createでデータベースを作成しても、そのデータベースにはアクセスしない。アクセスるにはuseで明示的に選択する必要がある。

・MySQLを起動したときにも入るデータベースを指定できる。
　mysql -h host -u user -p データベース名 のように、必要な接続パラメータを全て指定した後にデータベースの名前を指定する。

・データベースの作成は簡単だが、作成しただけではテーブルは空。難しいのは、データベースの構造、
　つまりどのようなテーブルが必要で各テーブルにどのような列を含めるかを決定すること。
　例えばペットの記録を格納するテーブルが必要だとする。このテーブルにpetという名前をつけることができ、
　少なくとも各ペットの名前を含めるべき。名前事態に深い意味は無いため、他の情報として種や性別、
　家族の複数メンバーがペットを飼っている場合は各ペットの所有者を記録することもできる。
　年齢はどうだろうか？重要な情報ではあるが、データベースに格納するには適さない。なぜなら、年齢は時間の経過によって変化するため、
　記録を頻繁に更新する必要が生じるから。代わりに、生年月日などの固定値を格納する方が良い。そうしておけば、
　年齢が必要になった時に、現在の日付と生年月日の差として計算することができるため。

　このように、データベースに含む情報にも良し悪しがあるため、そのデータが必要かどうか疑問に思った時は
　データを頻繁に更新する必要があるか、他の形のデータで代わりが効かないかなどを考えてみる方が良い。

・空のテーブルにデータを格納する簡単な方法は、各データ(ペット)に対応する行を記述したテキストファイルを作成してから、
　1つのステートメントでそのファイルの内容をテーブルにロードすること。1行に1レコードを記述したテキストファイルから
　テーブルにロードするには、loadステートメントを使用する。

　新しいレコードを1つずつ追加する場合は、insertステートメントが役立つ。

・テーブルから情報を取り出すには、selectステートメントを使用する。
　このステートメントの一般的な形式は以下の通り。

　select what_to_select
　from which_table
　where conditions_to_satisfy;

　what_to_selectは取得する対象。これには、列のリストか「全ての列」を表す*を指定できる。
　which_tableは、データを取り出すテーブルを指定する。
　where句はオプションで、指定する場合は取得対象となる行の条件を1つまたは複数 conditions_to_satisfyに指定する。

・結果をソートするにはorder by句を使用する。文字型のカラムでは、ソートは他の全ての比較演算と同様に、
　通常大文字小文字の区別なしで実行される。カラムのソートで大文字と小文字を区別するには、
　order by binary col_name　のように指定する。ソートのデフォルトは昇順となっており、最小値が最初になる。
　逆順(降順)でソートするには、ソートするカラムの名前にdescキーワードを加える。
　select name, birth from pet order by birth desc;

・MySQlでは、0やNULLはfalseを意味し、それ以外は全てtrueを意味する。
　ブール演算のデフォルトの真理値(true)は 1 となっている。

・group byでは、2つのNULL値は等しいとみなされる。order byを実行する場合、NULL値はorder by… asc では最初に表示され、
　order by…　desc では最後に表示される。NULLを操作する時によくある間違いとして、not nullと定義されたカラムには
　ゼロや空の文字列は挿入できないと想定すること。これらは実際のところ値だが、一方NULLは「値が無い」ことを意味する。
　そのため、ゼロや空の文字列はnot nullカラムに挿入することができる。

・MySQLでは、標準のSQLパターンマッチングに加え、vi,grep,sedなどのUNIXユーティリティーで使用されるものに似た拡張正規表現に基づく
　パターンマッチング形式が提供されている。SQLパターン一致では、_を使用して任意の単一文字(正規表現の . に値)を照合し、%を使用して
　任意の文字列(正規表現の .* みたいなもの)を照合できる。MySQLのデフォルトでは、SQLパターンでは大文字と小文字が区別されない。
　SQLパターンを使用する場合は、=または<>のかわりにlike,not like 比較演算子を使用する

・count()値を使用する場合、select species のように選択するカラムを指定する場合は、それらのカラム(この例ではspecies)を
　group by句で指定する必要がある。つまり　select species, count(*) from pet group by species;　のようにしなければならない。
　そうでない場合、ONLY_FULL_GROUP_BY SQLモードが有効である場合は　select owner, count(*) from pet;　の文に対して、
　「ERROR 1140 (42000): In aggregated query without GROUP BY, expression #1 of SELECT list contains nonaggregated column 
　'menagerie.pet.owner';this is incompatible with sql_mode=only_full_group_by」のエラーが出る。
　ONLY_FULL_GROUP_BY SQLモードが有効でない場合は、select owner, count(*) from pet; の文に対して
　+--------+----------+
| owner  | COUNT(*) |
+--------+----------+
| Harold |        8 |
+--------+----------+
　のように表示される。

・パーティショニングとは、1つのテーブルデータを分割して管理すること。パーティショニングを行うことで
　巨大なデータを複数に分割でき、分割されたデータを丸ごと削除したり、select時に特定のパーティションを参照することで
　特定のパーティションのみをselectの対象として絞り込むことができる。

・as はエイリアスを定義する物。エイリアスをクエリーの選択リストに使用すると、カラムを別の名前にすることができる。

・descはdescribeの省略形式。

・mysqlをバッチモードで実行することもできる。実行するには、実行するステートメントを
　ファイルに入れてからその入力をファイルから読み取るように指示する。指示は以下のようなもの。

　　shell> mysql < batch-file

　windowsで実行する場合に、ファイル内の一部の特殊文字によって問題が発生する時は以下のように実行できる。

　　C:\> mysql -e "source batch-file"

　コマンド業で接続パラメータを指定する必要がある場合、コマンドは以下のようになる。

　　shell > mysql -h host -u user -p < batch-file
　　Enter password: ********

　この方法でmysqlを使用する場合は、スクリプトファイルを作成してから、そのスクリプトを実行することになる。
　スクリプト内の一部のステートメントでエラーが発生してもスクリプトを続行する場合は、
　--forceコマンド行オプションを使用する。多量の出力を生成するクエリーの場合、
　画面でスクロールアップする出力を見る代わりに、以下のようにpagerを介して出力できる。

　　shell> mysql < batch-file | more

　後で処理できるように、以下のように出力をファイルに取り込むことができる。

　　shell> mysql < batch-file > mysql.out

・cronジョブからクエリーを実行する場合など、インタラクティブ(対話形式)には使用できないこともある。
　この場合はバッチモードを使用する必要がある。

・mysqlをバッチモードで実行したときのデフォルトの出力形式は、インタラクティブに使用した場合とは異なり、
　より簡潔になる。バッチモードでインタラクティブ出力形式のデータを取得するには mysql -t を使用する。
　実行されるステートメントを出力にエコーするには mysql -v を使用する。
　以下のように指定すると、mysqlプロンプトからでもスクリプトを使用できる。

　　mysql> source filename;
　　mysql> \. filename

・

============================================================================================================================

わからないこと

・vscodeからファイルのパスをコピーして貼り付けると、バックスラッシュが1つしかないため
　2つにしたい時に不便。どうすればよいか？

・

============================================================================================================================

エラーやミス、つまずいたことなど

・テキストファイルからテーブルにデータをロードしようとし、load data local infile 'ファイルパス\ファイル名' into table pet;
　のようにしたら、以下のエラーが出た。
　「ERROR 3948 (42000): Loading local data is disabled; this must be enabled on both the client and server sides」
　　→ サーバとクライアントの両方で「local-infile」パラメータを「ON」にする必要がある。
　　　MySQL8.0からセキュリティ強化のため、「load data infile local」コマンドはデフォルトで無効にされてしまったことによるエラー。

　　　set persist local_infile=1;(サーバー側、MySQL内で実行)
　　　mysql -u root -p --local_infile=1(クライアント側、コマンドプロンプトで実行)

　　　上記の2つのコマンドを実行し、ロードすることができた。
　　　ファイルからデータをロードする場合は、コマンドプロンプト側で毎回このコマンドを打つ必要がありそう？

・なぜかMySQLディレクトリにbinディレクトリが無く、Windowsに環境変数パスを通すことができない
　　→ 隠しディレクトリであるC:\ProgramData の方のMySQLを確認してしまっていたため。
　　　正しく見るべきディレクトリは C:\Program Files\MySQL\MySQL Server 8.3 の方だった。

・load data local infileでファイルの内容がタブ区切りでテーブルにロードされない
　　→ load文では「FIELDS TERMINATED BY」オプションによってどの位置でフィールドを分割するかを認識する。
　　　デフォルトでは FIELDS TERMINATED BY '\t' となっているが、vscodeでタブを押したつもりでも
　　　検索するとロードするデータファイルのタブ空白が\tでは引っかからず、\sでひっかかったため、
　　　これによる違いが上手くいかなかった原因と思われる。試しにフィールドの区切りをタブ空白ではなく
　　　,区切りにしてFIELDS TERMINATED BY ','にしたら上手くデータがロードできた。\tの代わりに\sを指定しても
　　　なんか変なことになるので,で区切ることにした方が良いかもしれない。
　　　それと　LINES TERMINATED BY '\r\n'　

