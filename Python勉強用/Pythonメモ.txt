Pythonメモ


・\に続く文字を特殊文字扱いされたくない場合は、最初の引用符の前にrを付けたraw文字列を使用する。

・変数同士や、変数と文字列リテラルを連結したい場合は+をつける。

・Pythonでは、C言語と同様にゼロでない整数値は真となり、ゼロは偽となる。

・pass文は何もしないため、構造上文を書くことが要求されているがプログラムは何の動作もする必要が無いときに使用する。

・defで定義した関数のプログラムを記述する最初の行を文字列リテラルにした場合、この文字列はこの関数の
　「ドキュメンテーション文字列(docstringとも呼ばれる)」と呼ばれる。

・defで関数を定義する際は、プログラム実行分がインデントされている必要がある。

・defで定義した関数で呼び出される引数には、「位置引数」と「キーワード引数」の2種類がある。それぞれの説明は以下の通り。

　　位置引数 = def 関数名(仮引数1,仮引数2):
　　　　　　　　…
　　　　　　　　関数名(実引数1,実引数2)　　のような形で引数を指定する。引数を記載した順番に従って引数の値が渡される。

　　キーワード引数 = def 関数名(仮引数1,仮引数2)
　　　　　　　　　　　…
　　　　　　　　　　　関数名(仮引数1=実引数1,仮引数2=実引数2)　　のような形で引数を指定する。どの仮引数に対して値を渡すのかが
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　指定されているため、引数を記述する順番が任意となる。

・関数の引数指定場所に/がある場合、/の前に配置される引数は位置専用引数となる。
　同様に、*がある場合、*の後に配置される引数はキーワード専用引数となる。

・コンストラクタ = オブジェクト生成時に最初に実行される「初期化用の特殊な関数」のこと。Pythonではコンストラクタは
　　　　　　　　　 「__init__」という名前で定義するのが慣習となっている。コンストラクタを呼び出すことで
　　　　　　　　　 当該のクラスのオブジェクトを生成できる。

・Pythonの命名規則には以下のようなものがある。

　　パスカルケース = 単語をつなげて最初の一文字と、各単語の最初の一文字を大文字にする。クラス名の定義で使用する。
　　　　　　　　　　 最初が大文字ならアッパーキャメルケース、小文字ならロうワーキャメルケースとも呼ぶ。

　　スネークケース = 単語をつなげた時に全て小文字で書き、単語と単語の間をアンダースコアでつなげる。
　　　　　　　　　　 関数名やメソッド名の定義で使用する。

・メソッドの第一引数には常に「self」を使用する。selfはインスタンス自身を示すものとなっており、呼び出すときは引数として値を入れない。

・list.insert,remove,sortなどのリストを操作するメソッドは戻り値にNoneを返している。これはPythonのデータ構造全てについての
　設計上の原則となっている。

・リストをキューとして使うことも可能だが、この場合は最初に追加した要素を最初に取り出すため挿入(insert)や取り出し(pop)を
　リストの先頭に対して行うと遅くなってしまう。キューの実装には「collections.deque」を使うとよい。
　このクラスはよく設計されており、高速な追加(append)と取り出し(pop)を両端に対して実現している。

・for x in range(10):とループを行った場合、ループが終了した後にも存在するxという名前の変数を作ることに注意する。
　例えば平方のリストをなんの副作用もなく計算したい場合、
　squares = list(map(lambda x: x**2, range(10)))　や　squares = [x**2 for x in range(10)]　といった方法がある。

・リスト内方表記は、括弧の中の式、for句、そして0個以上のforかif句で構成される。リスト内方表記の実行結果は、
　forとif句のコンテキスト中で式を評価した結果からなる新しいリストとなる。例えば、以下のリスト内方表記は2つの
　リストの要素から、違う者同士をペアにする。

　　[(x,y) for x in [1,2,3] for y in [3,1,4] if x != y]

・中括弧{}で要素を括ると、集合型として扱うことができる。集合とは、重複する要素を持たない順序付けられていない
　要素の集まりのこと。例としては以下の通り。

　　basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
　　print(basket)
{'orange', 'banana', 'pear', 'apple'}

・Pythonのビット演算子には以下のようなものがある。

　　a & b = aとb両方にある

　　a | b = aまたはbどちらかにある

　　a ^ b = aまたはbどちらかにない

・