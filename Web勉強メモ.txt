Web勉強メモ

・ローカルファイルのテストに関する問題

　一部のサンプルはローカルファイルとして開くと実行されない。これには様々な理由がある。最も可能性が高いのは以下のような原因。

    非同期リクエストを特徴としている
    　→ 一部のブラウザ(Chromeを含む)は、ローカルファイルからサンプルを実行するだけでは非同期リクエストは実行しない。
    　　(　https://developer.mozilla.org/ja/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data　を参照)
    　　これはセキュリティ上の制限があるため。
    　　https://developer.mozilla.org/ja/docs/Learn/Server-side/First_steps/Website_security　を参照。

    サーバー側の言語を使用している
    　→ サーバー側の言語(PHPやPythonなど)では、コードを解釈して結果を提供する特別のサーバが必要。

    他のファイルをインクルードしている
    　→ ブラウザは通常、file://スキーマを使用してリソースを読み込むリクエストをオリジン間リクエストとして扱う。
    　　そのため、他のローカルファイルを入れることができるローカルファイルを読み込むと、CORSエラーが発生することがある。

・Googleの検索エンジンはハイフンを単語の区切りとして扱うが、アンダースコアは扱われない。そのため、ファイル名にはアンダーバーではなく
　ハイフンを使った方がよいかもしれない。

・JavaScriptが先に読み込まれ、まだ読み込まれていないHTMLに影響を与えることになると、問題が生じる可能性があるため、
　JavaScriptはHTMLページの下部に配置するようにする。

・クライアントとサーバー

　クライアントは、一般的なwebユーザーが使うインターネットに接続された端末と、これらの端末で利用できるwebにアクセスするソフトウェア
　(Chromeなどのブラウザ)のこと。サーバーは、ウェブページ、サイト、アプリを格納しているコンピュータのこと。クライアント端末がwebページに
　アクセスしたいときは、ウェブページのコピーがサーバーからクライアントにダウンロードされ、ユーザーのウェブブラウザに表示される。

　ブラウザにwebアドレスを入力すると、ブラウザはDNSを見て、ウェブサイトのIPアドレスを探し出す。ブラウザはウェブサイトがどのサーバー
　にいるのかを探し出す必要があり、それでHTTPのメッセージを正しい場所に送ることができる。

・ブラウザにwebアドレスを打ち込んだときに何が起こっているのかを以下にまとめる。

    1．ブラウザはDNSサーバーにアクセスし、ウェブサイトのあるサーバの実際のアドレスを探す。

    2．ブラウザはサーバにHTTPリクエストメッセージを送信してウェブサイトのコピーをクライアントに送るよう求める。
    　 このメッセージ、およびクライアントのサーバの間でやり取りされるその他すべてのデータは、TCP/IPを使用して
    　 インターネット経由で送信される。

    3．サーバーがクライアントのリクエストを承認すると、サーバーはクライアントに"200 OK"と言うメッセージを送る。
    　 これは「そのウェブサイトを見ることができます、どうぞ」という意味。そしてウェブサイトのファイルを、データパケットと呼ばれる
    　 一連の小さな塊としてブラウザに送信し始める。

    4．ブラウザは小さな塊を完全なwebページに組み立て、表示する。

・構成するファイルが解釈される順序

　ブラウザがサーバーにHTMLファイルのリクエストを送信する時、こうしたHTMLファイルには<link>要素が外部のCSSスタイルシートを参照
　していたり、<script>要素が外部のJavaScriptのスクリプトを参照していたりすることがよくある。ブラウザがページを読み込むときに、
　これらのファイルがブラウザによって解釈される順序を知ることが重要。順序としては以下の通り。

    1．ブラウザはまずHTMLファイルを解釈し、<link>要素による外部CSSスタイルシートへの参照や、<script>要素によるスクリプトへの参照を
    　 認識するようになる。

    2．ブラウザはHTMLを解釈しながら、<link>要素から見つかったCSSファイルと<script>要素から見つかったJavaScriptファイルに対して
    　 サーバにリクエストを送り返し、それらからCSSとJavaScriptを解釈する。

    3．ブラウザは解釈されたHTMLからメモリ内にあるDOMツリーを生成し、解釈されたCSSからメモリー内にCSSOM構造を生成し、
    　 解釈されたJavaScriptをコンパイルして実行する。
    4．ブラウザがDOMツリーを構築し、CSSOMツリーからスタイルを適用してJavaScriptを実行すると、ページの視覚表現が画面に描かれ、
    　 ユーザーはページの内容を見て、それとの対話を始めることができる。

・ブラウザが文書を表示する時、ブラウザはそのコンテンツをスタイツ情報と結合する必要がある。以下の段階で文書が処理される。

    1．ブラウザがHTMLをロードする。

    2．HTMLを「DOM(Document Object Model)に変換する。DOMは文書をコンピュータのメモリ内で表現したもの。

    3．その後ブラウザはHTML文書にリンクされているリソース、例えば埋め込まれた画像や動画、そしてリンクされたCSSも取得する。
    　 JavaScriptはもう少し後に処理されるため、省略。

    4．ブラウザは取得したCSSwo構文解析し、要素、クラス、IDなどセレクターの種類ごとに分類する。
    　 見つけたセレクターに基づいて、DOMのどのノードにどのルールを適用するかを決定し、スタイルを適用する。
    　 (この中間ステップは「レンダーツリーと呼ばれる。)

    5．レンダーツリーは、ルール摘要後の構造にレイアウトされる。

    6．ページが画面に表示される。(この段階は「ペイント」と呼ばれる。)

・DOMについて

　DOMにはツリーのような構造がある。マークアップの各要素、属性、及びテキストは、ツリー構造の「DOMノード」になる。
　ノードは他のDOMノードとの関係によって定義される。要素は子ノードの親であり、子ノードには兄弟がある。例えば、以下のようなHTMLがある。

    <p>
      Let's use:
      <span>Cascading</span>
      <span>Style</span>
      <span>Sheets</span>
    </p>

　この場合DOMでは<p>要素が親ノード。子にはテキストノードと3つの<span>要素をノードとして持つ。
　一方で、spanノードは親でもあり、テキストノードを子に持つ。

・

=================================================================================================================================